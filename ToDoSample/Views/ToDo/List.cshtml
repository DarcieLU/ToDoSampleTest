@model IEnumerable<ToDoSample.Models.ToDoModel>

@{
    Layout = null;
}

 <!-- This section should be hidden by default and shown when there are todos -->
<section class="main">
    <input class="toggle-all" type="checkbox">
    <label for="toggle-all">Mark all as complete</label>
    <ul id="ToDoList" class="todo-list">
        <!-- These are here just to show the structure of the list items -->
        <!-- List items should get the class `editing` when editing and `completed` when marked as completed -->
        @foreach (var item in Model)
        {
            <li class="@(item.IsCompleted?"completed":"view")">
                <div class="view">
                    <input class="toggle" onchange="ToDoFormoperator.ChangeStatus('@item.Id',@(item.IsCompleted?"false":"true"))" type="checkbox" @(item.IsCompleted ? "checked" : "")>
                    <label>@item.ToDo</label>
                    <button class="destroy" type="button" onclick="ToDoFormoperator.Delete('@item.Id')"></button>
                </div>
                <input class="edit" value="Create a TodoMVC template">
            </li>
        }
    </ul>
</section>
<!-- This footer should hidden by default and shown when there are todos -->
<footer class="footer">
    <!-- This should be `0 items left` by default -->
    <span class="todo-count"><strong>@Model.Where(x=>x.IsCompleted==false).Count()</strong> item left</span>
    <!-- Remove this if you don't implement routing -->
    <ul class="filters">
        <li>
            <a @(ViewBag.status!=null && ViewBag.status==0?"class=selected":"")  onclick="ToDoFormoperator.GetList('0')">All</a>
        </li>
        <li>
            <a @(ViewBag.status!=null && ViewBag.status==1?"class=selected":"") onclick="ToDoFormoperator.GetList('1')">Active</a>
        </li>
        <li>
            <a @(ViewBag.status!=null && ViewBag.status==2?"class=selected":"") onclick="ToDoFormoperator.GetList('2')">Completed</a>
        </li>
    </ul>
    <!-- Hidden if no completed items are left ↓ -->
    @if (Model.Where(x => x.IsCompleted).Count() > 0)
    {
    <button type="button" class="clear-completed" onclick="ToDoFormoperator.DeleteAll()">Clear completed</button>
    }
</footer>